1.1 Với đối tượng Student.Thiết kế API để :
     a. Trả về thông tin của tất cả sinh viên.
	 RequestMethod.GET
	 {{host}}/student/all
     b. Trả về thông tin của một sinh viên nào đó theo định danh.
	 RequestMethod.GET
	 {{host}}/student/searchByStudentCode với param studentcode
     c.Tạo mới 1 Sinh viên.
	 RequestMethod.POST
	 {{host}}/student/create
	 {
    "student_code": "phongtv2",
    "name": "Từ Văn Phong",
    "password": "123456",
    "class_id": 1,
    "is_monitor": true
     }
     d. Cập nhật vài thông tin cơ bản của sinh viên nào đó.
	 RequestMethod.PUT
	 {{host}}/student/update
	 {
    "id": 1,
    "student_code": "phongtv2",
    "name": "Từ Văn Phong",
    "class_id": 1,
    "is_monitor": false
	}
     e. Sửa 'name' (tên sinh viên) của sinh viên.
	 RequestMethod.PUT
	 {{host}}/student/update
	 {
	 "id": 1,
    "name": "Từ Văn Phong",
     }
     f. Thay đổi password.
	{{host}}/student/change/password
	 {
    "oldPassword": 123456,
    "newPassword": 1234567890,
    "student": {
        "id": 1
    }
    }
     g. Quên mật khẩu.
	 RequestMethod.GET
	 {{host}}/student/reset/password param email
     h. Xóa sinh viên nào đó.
	 RequestMethod.Delete
	 {{host}}student/{id} pathvariable
  
 1.2 Với đối tượng Class. Thiết kế API để trả về thông tin của:
     a. Trả về thông tin của tất cả các lớp.
	 RequestMethod.GET
	 {{host}}/class/all
     b. Trả về thông tin của một lớp nào đó theo định danh
	 RequestMethod.GET
	 {{host}}/class/findByName param name
     c. Lấy về thông tin của lớp trưởng của lớp
	 RequestMethod.GET
	 {{host}}/class/mentor param idClass
     d. Trả về thông tin của tất cả sinh viên trong lớp đó.
	 RequestMethod.GET
	 {{host}}/class/allStudentInAClass param idClass
     e. Cập nhật vài thông tin cho class
	 RequestMethod.PUT
	 {{host}}/class/update
	 
	 {
        "id": 3,
        "name": "CD303",
        "department_id": 2,
        "lead_student_code": null
    }

1.3 Chung
     a. Đăng nhập, đăng xuất.
	 RequestMethod.POST
	 {{host}}/login
	 { "student_code": "phongtv",
	   "password": 123456789
	 }
	 
	 RequestMethod.POST
	 {{host}}/logout
	 { "student_code": "phongtv"
	 }
     b. Lọc sinh viên theo các tiêu chí sau: tên (fullname),  năm sinh (birthday), lớp học(class_id), khoa.
	 RequestMethod.GET
	 {{host}}/student/searchAll
	 param fullname, birthday, class_id, department_id
     c. Lấy Sinh viên có id = 10 trong Lớp có id = 1
	 RequestMethod.GET
	 {{host}}/student/findByIdAndIdClass
	 param studentId, idClass
	 
Những HttpStatus nào nên đc dùng trong trường hợp sau: 
     1. Lấy dữ liệu thành công, trả về cho client 200
     2. Khi Sinh Viên vừa đc tạo thành công 201
     3. Khi xóa Sinh viên thành công 200
     4. Yêu cầu từ client không hợp lệ (có thể truyền sai dữ liệu, ...) 400
     5. Không có mã xác thực trong reques 407
     6. Sinh viên không có quyền truy cập thông tin cá nhân của sinh viên khác 407
     7. Không tìm thấy path như url 404
     8. Version cũ không còn đc sử dụng 404
     9. Có quá nhiều Sinh viên truy cập Máy chủ nhà trường, máy chủ muốn từ chối yêu cầu. 408
     10. Server trong quá trình xử lý gặp lỗi logic ngoài ý muốn. 500
     11. Yêu cầu dịch vụ, nhưng server không có dịch vụ đó 415
     12. Máy chủ gọi sang hệ thống khác, nhưng hệ thống đó trả về quá muộn 408
	 
	 
Tôi là 1 thực tập sinh, ngày đầu làm việc ở TTC, sếp muốn tôi tìm hiểu về Spring. Sau khi tìm hiểu xong, anh ấy bảo tôi làm 1 bài tập nho nhỏ để chứng minh.
Anh ấy muốn có 1 chương trình với chủ đề là Quản lý người đọc sách.
1. Viết 1 api cho phép in ra tất cả những User.
RequestMethod.GET
{{host}}/user/All
2. Viết api in ra tất cả sách được lọc theo tên.
RequestMethod.GET
{{host}}/user/findByNameBook param name
3. Viết api lấy tất cả User và những cuốn sách họ đang đọc.
Thông tin  :
   User: Id, Name, Address, Age.
   Book: Id, Name, Author, Price
   RequestMethod.GET
{{host}}/user/findAllUserAndBooks

